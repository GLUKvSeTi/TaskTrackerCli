package main

import (
	"fmt"
	"os"
	"strconv"
)

func displayTasks(tasks []Task) {
	if len(tasks) == 0 {
		fmt.Println("–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	for _, task := range tasks {
		statusEmoji := "üìù"
		switch task.Status {
		case StatusInProgress:
			statusEmoji = "üîÑ"
		case StatusDone:
			statusEmoji = "‚úÖ"
		}

		fmt.Printf("%s ID: %d | %s\n", statusEmoji, task.ID, task.Title)
		fmt.Printf("   –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", task.Description)
		fmt.Printf("   –°—Ç–∞—Ç—É—Å: %s | –°–æ–∑–¥–∞–Ω–∞: %s\n\n",
			task.Status, task.CreatedAt.Format("2006-01-02 15:04"))
	}
}

func printUsage() {
	fmt.Println(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  task-tracker add <–∑–∞–≥–æ–ª–æ–≤–æ–∫> <–æ–ø–∏—Å–∞–Ω–∏–µ>    - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  task-tracker update <id> <–∑–∞–≥–æ–ª–æ–≤–æ–∫> <–æ–ø–∏—Å–∞–Ω–∏–µ> - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  task-tracker delete <id>                   - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
  task-tracker start <id>                    - –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É (in-progress)
  task-tracker done <id>                     - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É (done)
  task-tracker list                          - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
  task-tracker list-todo                     - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  task-tracker list-progress                 - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
  task-tracker list-done                     - –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  task-tracker info                          - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  task-tracker help                          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`)
}

func createService(useMemoryStorage bool) (TaskService, error) {
	var repository TaskRepository
	repository = NewFileRepository("tasks.json")

	return NewTaskService(repository)
}

func main() {
	if len(os.Args) < 2 {
		printUsage()
		os.Exit(1)
	}

	useMemoryStorage := false
	if len(os.Args) > 1 && os.Args[1] == "--memory" {
		useMemoryStorage = true
		os.Args = append(os.Args[:1], os.Args[2:]...)
	}

	service, err := createService(useMemoryStorage)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: %v\n", err)
		os.Exit(1)
	}

	command := os.Args[1]

	switch command {
	case "add":
		if len(os.Args) < 4 {
			fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
			fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: task-tracker add <–∑–∞–≥–æ–ª–æ–≤–æ–∫> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
			os.Exit(1)
		}
		title := os.Args[2]
		description := os.Args[3]
		if err := service.Add(title, description); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

	case "update":
		if len(os.Args) < 5 {
			fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
			fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: task-tracker update <id> <–∑–∞–≥–æ–ª–æ–≤–æ–∫> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
			os.Exit(1)
		}
		id, err := strconv.Atoi(os.Args[2])
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏: %v\n", err)
			os.Exit(1)
		}
		title := os.Args[3]
		description := os.Args[4]
		if err := service.Update(id, title, description); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

	case "delete":
		if len(os.Args) < 3 {
			fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
			fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: task-tracker delete <id>")
			os.Exit(1)
		}
		id, err := strconv.Atoi(os.Args[2])
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏: %v\n", err)
			os.Exit(1)
		}
		if err := service.Delete(id); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

	case "start":
		if len(os.Args) < 3 {
			fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
			fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: task-tracker start <id>")
			os.Exit(1)
		}
		id, err := strconv.Atoi(os.Args[2])
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏: %v\n", err)
			os.Exit(1)
		}
		if err := service.UpdateStatus(id, StatusInProgress); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("–ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'!")

	case "done":
		if len(os.Args) < 3 {
			fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
			fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: task-tracker done <id>")
			os.Exit(1)
		}
		id, err := strconv.Atoi(os.Args[2])
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏: %v\n", err)
			os.Exit(1)
		}
		if err := service.UpdateStatus(id, StatusDone); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("–ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞'!")

	case "list":
		tasks := service.GetAll()
		displayTasks(tasks)

	case "list-todo":
		tasks := service.GetAllByStatus(StatusToDo)
		fmt.Println("=== –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ===")
		displayTasks(tasks)

	case "list-progress":
		tasks := service.GetAllByStatus(StatusInProgress)
		fmt.Println("=== –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ===")
		displayTasks(tasks)

	case "list-done":
		tasks := service.GetAllByStatus(StatusDone)
		fmt.Println("=== –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ===")
		displayTasks(tasks)

	case "help", "-h", "--help":
		printUsage()

	default:
		fmt.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n", command)
		printUsage()
		os.Exit(1)
	}
}
